using System.Collections;
using System.Collections.Generic;
using NUnit.Framework;
using UnityEngine;
using UnityEngine.TestTools;
using U.DalilaDB;
using System.Text.RegularExpressions;
using System;
using System.IO;
using System.Runtime.Serialization;
using System.Data;
using System.Threading.Tasks;

public class DalilaCollection_D0Logic
{


    #region Example classes

    [KnownType(typeof(User))]
    [DataContract()]
    class User : DalilaDBCollection<User>
    {

        [DataMember()]
        public int count;

        [DataMember()]
        public string name;

        protected override string rootPath_ => Application.persistentDataPath;

    }

    #endregion Example classes


    [SetUp]
    public void SetUp()
    {
        // Delete the directory to clear it
        try { Directory.Delete(User.LocationPath, true); } catch (Exception) { }
        User.DeleteAll();

    }




    [Test]
    public void A900_IdOfADocumentWontBeNull()
    {

        // Create two documents wiith the same key
        Debug.Log("Save");
        var newd1 = new User { _id = "3333333333333333333", count = 66, name = "Pedro" };

        Assert.IsFalse(newd1._id == null);

        // If you set the key as null
        newd1._id = null;

        // A diferent key will be generated
        Assert.IsFalse(newd1._id == null);
        Assert.IsFalse(newd1._id == "3333333333333333333");

        var newd2 = new User { _id = null, count = 66, name = "Pedro" };

        // A diferent key will be generated
        Assert.IsFalse(newd2._id == null);

    }




    [Test]
    public void A000_Save_TwoDocumentsWithTheSameKey_WillOverwrite()
    {

        // Create two documents wiith the same key
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432069", count = 66, name = "Pedro" };
        var newd2 = new User { _id = "4961429416443432069", count = 77, name = "Paco" };

        // The first one will be saved
        var opp1 = newd1.Save();
        Assert.IsTrue(opp1);
        Assert.AreEqual(1, (int)opp1);
        Assert.AreEqual(66, User.FindById("4961429416443432069").Data.count);

        // And The second one will overwrite the first
        var opp2 = newd2.Save();
        Assert.IsTrue(opp2);
        Assert.AreEqual(1, (int)opp2);
        Assert.AreEqual(77, User.FindById("4961429416443432069").Data.count);

        // The first one will be overwrite again
        var opp3 = newd1.Save();
        Assert.IsTrue(opp3);
        Assert.AreEqual(1, (int)opp3);
        Assert.AreEqual(66, User.FindById("4961429416443432069").Data.count);

    }

    [Test]
    public void A003_Save_DiferentKeyIsAutoGeneratedIfNotSet()
    {

        // Create two documents wiith the same key
        User.Define();
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" }.Save();
        var newd2 = new User { count = 77, name = "Paco" }.Save();
        User.Define();
        var key1 = User.FindOne(u => u.count == 66).Data._id;
        var key2 = User.FindOne(u => u.count == 77).Data._id;

        // Keys are diferent
        Assert.IsFalse(key1 == key2);
        User.Define();
        // Key can be used to find the documents
        Assert.AreEqual(66, User.FindById(key1).Data.count);
        Assert.AreEqual(77, User.FindById(key2).Data.count);

    }


    [Test]
    public void A060_Save_CanSaveAnIEnumerableOfTypeCollection()
    {

        // Create two documents wiith the same key
        User.Define();
        Debug.Log("Save");
        var list = new User[]
        {
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
        };
        var opp = list.Save();
        Assert.IsTrue(opp);
        Assert.AreEqual(6, (int)opp);
        Assert.AreEqual(6, User.Count());
        User.Define();


        // Elements are not overwrited
        opp = list.Save();
        Assert.IsTrue(opp);
        Assert.AreEqual(6, (int)opp);
        Assert.AreEqual(6, User.Count());
        User.Define();

    }



    [Test]
    public void A061_SaveNew_CanSaveAnIEnumerableOfTypeCollection()
    {

        // Create two documents wiith the same key
        User.Define();
        Debug.Log("Save");
        var list = new User[]
        {
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
            new User { count = 66, name = "Pedro" },
        };
        var opp = list.SaveNew();
        Assert.IsTrue(opp);
        Assert.AreEqual(6, (int)opp);
        Assert.AreEqual(6, User.Count());
        User.Define();


        // Elements are overwrited
        opp = list.SaveNew();
        Assert.IsTrue(opp);
        Assert.AreEqual(6, (int)opp);
        Assert.AreEqual(12, User.Count());
        User.Define();

    }




    [Test]
    public void A010_SaveNew_WillGenerateNewRandomKey()
    {

        // Create two documents wiith the same key
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432069", count = 66, name = "Pedro" };
        var newd2 = new User { _id = "4961429416443432069", count = 77, name = "Paco" };

        // If SaveNew is used a new key is generated each time for he document
        newd1.SaveNew();
        Assert.IsFalse(newd1._id == "4961429416443432069");
        newd2.SaveNew();
        Assert.IsFalse(newd2._id == "4961429416443432069");
        newd1.SaveNew();
        newd2.SaveNew();

        // Now there are four documents stored
        Assert.IsTrue(User.Count() == 4);

        // And the initial key is not used to save
        Assert.IsFalse(User.Exist("4961429416443432069"));

    }

    [Test]
    public void A013_SaveNew_IfAKeyIsNotSet_OneWillAutoGenerated()
    {

        // Create two documents wiith the no key
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };

        // Save the documents
        Assert.IsTrue(newd1.SaveNew());
        Assert.IsTrue(newd2.SaveNew());

        // Now two documents are stored
        Assert.IsTrue(User.Count() == 2);

        // And the dcuments have diferent keys
        var doc1 = User.FindOne(u => u.name == "Pedro").Data;
        var doc2 = User.FindOne(u => u.name == "Paco").Data;
        Debug.Log("Key1: " + doc1._id + " Key2: " + doc2._id);
        Assert.IsTrue(doc1._id != doc2._id);

    }





    [Test]
    public void A200_FindById_01WillFindAnDocumentByIdOrFindNull()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432069", count = 66, name = "Pedro" };

        // The first one will be saved
        Assert.IsTrue(newd1.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 1);
        Assert.IsTrue(User.Exist("4961429416443432069"));

        // Find the document by the id
        var opp = User.FindById("4961429416443432069");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // If you try to find an unexistent document will return null
        var opp2 = User.FindById("4961429416443432010");
        Assert.IsFalse(opp2);
        Assert.IsTrue(opp2.Data == null);

    }

    [Test]
    public void A203_FindById_62InvalidOrNullKey_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.FindById(null));
        Assert.Throws<ArgumentNullException>(() => User.FindById(""));
        Assert.Throws<FormatException>(() => User.FindById("343432"));
        Assert.Throws<FormatException>(() => User.FindById("f43f34ff"));
        Assert.Throws<FormatException>(() => User.FindById("4332 333 444 55  22"));
        Assert.Throws<FormatException>(() => User.FindById("433232893874673.254"));
        Assert.DoesNotThrow(() => User.FindById("4332328938746732254"));
    }




    [Test]
    public void A250_FindByIdOrDefault_01WillFindAnDocumentByIdOrReturnDefaultPassed()
    {
        var defaultDoc = new User { count = 11, };

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432069", count = 66, name = "Pedro" };

        // The first one will be saved
        Assert.IsTrue(newd1.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 1);
        Assert.IsTrue(User.Exist("4961429416443432069"));

        // Find the document by the id
        var opp = User.FindByIdOrDefault("4961429416443432069", defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // If you try to find an unexistent document will return default
        var opp2 = User.FindByIdOrDefault("4961429416443432010", defaultDoc);
        Assert.IsTrue(opp2);
        Assert.IsTrue(opp2.Data.count == 11);

    }

    [Test]
    public void A253_FindByIdOrDefault_62InvalidOrNullKey_WillThrowError()
    {

        var defaultDoc = new User { count = 11, };

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.FindByIdOrDefault(null, defaultDoc));
        Assert.Throws<ArgumentNullException>(() => User.FindByIdOrDefault("", defaultDoc));
        Assert.Throws<FormatException>(() => User.FindByIdOrDefault("343432", defaultDoc));
        Assert.Throws<FormatException>(() => User.FindByIdOrDefault("f43f34ff", defaultDoc));
        Assert.Throws<FormatException>(() => User.FindByIdOrDefault("4332 333 444 55  22", defaultDoc));
        Assert.Throws<FormatException>(() => User.FindByIdOrDefault("433232893874673.254", defaultDoc));
        Assert.DoesNotThrow(() => User.FindByIdOrDefault("4332328938746732254", defaultDoc));
    }




    [Test]
    public void A210_FindOne_01WillFindAnDocumentOrFindNull()
    {

        // Create five documents
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 99, name = "Ale" };

        // Save
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());

        // Check
        Assert.IsTrue(User.Count() == 5);

        // Find a document
        var opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);
        // Find a document
        opp = User.FindOne(d => d.count == 77);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 77);
        // Find a document
        opp = User.FindOne(d => d.name == "Ale");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.name == "Ale");
        // Find a document
        opp = User.FindOne(d => d.name == "Juan");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 88);

        // If you try to find an unexistent document will return null
        opp = User.FindOne(d => d.name == "Ema");
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data == null);
        // If you try to find an unexistent document will return null
        opp = User.FindOne(d => d.count == 100);
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data == null);

    }

    [Test]
    public void A211_FindOne_IfPredicateThrowsError_IsLikeDontFindAny()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 5);

        // Find a document
        var opp = User.FindOne(d => throw new Exception("Expected exceptiopn"));
        Assert.IsFalse(opp);

    }

    [Test]
    public void A216_FindOne_61NullPredicate_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.FindOne(null));
        Assert.DoesNotThrow(() => User.FindOne(d => true));

    }




    [Test]
    public void A270_FindOneOrDefault_01WillFindAnDocumentOrReturnDefaultPassed()
    {
        var defaultDoc = new User { count = 11, };

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 5);

        // Find a document
        var opp = User.FindOneOrDefault(d => d.count == 66, defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);
        // Find a document
        opp = User.FindOneOrDefault(d => d.count == 77, defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 77);
        // Find a document
        opp = User.FindOneOrDefault(d => d.name == "Ale", defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.name == "Ale");
        // Find a document
        opp = User.FindOneOrDefault(d => d.name == "Juan", defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 88);

        // If you try to find an unexistent document will return null
        opp = User.FindOneOrDefault(d => d.name == "Ema", defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 11);
        // If you try to find an unexistent document will return null
        opp = User.FindOneOrDefault(d => d.count == 100, defaultDoc);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 11);

    }

    [Test]
    public void A276_FindOneOrDefault_61NullPredicate_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.FindOneOrDefault(null, new User()));

    }




    [Test]
    public void A220_FindMany_01WillFindAnArrayOrEmptyArrayAndFalseOperation()
    {

        // Create six documents
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // Save
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Check
        Assert.IsTrue(User.Count() == 6);

        // Find documents
        var opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach(var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }
        // Find documents
        opp = User.FindMany(d => d.name == "Juan");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.name == "Juan");
        }
        // Find documents
        opp = User.FindMany(d => d.name == "Benito");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 1);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.name == "Benito");
        }
        // If you try to find an unexistent document will return empty array and false
        opp = User.FindMany(d => d.name == "Ema");
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data.Length == 0);

        // If you try to find an unexistent document will return empty array and false
        opp = User.FindMany(d => d.count == 11);
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data.Length == 0);


    }

    [Test]
    public void A221_FindMany_IfPredicateThrowsError_IsLikeDontFindAny()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 6);

        // Find a document
        var opp = User.FindMany(d => throw new Exception("Expected exception"));
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data.Length == 0);

    }

    [Test]
    public void A223_FindMany_61NullPredicate_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.FindMany(null));

    }

    [Test]
    public void A226_FindMany_IfLimitPassedOnlyThatreadsWillBeDone()
    {

        // Create one document
        Debug.Log("Save");
        for (int i = 0; i < 20; i++)
            new User { count = i, name = "Pedro" }.Save();

        // 20 one document will be stored
        Assert.IsTrue(User.Count() == 20);

        // Find all document will return all
        Assert.AreEqual(14, User.FindMany(u => u.count < 14).Data.Length);

        // Limit will limit reads
        Assert.AreEqual(8, User.FindMany(u => u.count < 14, limit: 8).Data.Length);

        // Limit will limit reads
        Assert.AreEqual(1, User.FindMany(u => u.count < 14, limit: 1).Data.Length);

        // Cero or less will find all
        Assert.AreEqual(14, User.FindMany(u => u.count < 14, limit: -1).Data.Length);

        // Cero or less will find all
        Assert.AreEqual(14, User.FindMany(u => u.count < 14, limit: 0).Data.Length);
    }




    [Test]
    public void A230_FindAll_WillFindAllDocuments()
    {

        // Create six documents
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // Find all document when no documents are stored will return empyty array
        var opp = User.FindAll();
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data.Length == 0);


        // Save
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Check
        Assert.IsTrue(User.Count() == 6);

        // Find all documents
        opp = User.FindAll();
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 6);

    }

    [Test]
    public void A233_FindAll_IfLimitPassedOnlyThatreadsWillBeDone()
    {

        // Create one document
        Debug.Log("Save");
        for (int i = 0; i < 20; i++)
            new User { count = 66, name = "Pedro" }.Save();

        // 20 one document will be stored
        Assert.IsTrue(User.Count() == 20);

        // Find all document will return all
        Assert.AreEqual(20, User.FindAll().Data.Length);

        // Limit will limit reads
        Assert.AreEqual(12, User.FindAll(12).Data.Length);

        // Limit will limit reads
        Assert.AreEqual(1, User.FindAll(1).Data.Length);

        // Cero or less will find all
        Assert.AreEqual(20, User.FindAll(-1).Data.Length);

        // Cero or less will find all
        Assert.AreEqual(20, User.FindAll(0).Data.Length);
    }




    [Test]
    public void A300_UpdateById_01WillFindAndUpdateAnDocumentIfExist()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432060", count = 66, name = "Pedro" };
        var newd2 = new User { _id = "4961429416443432061", count = 66, name = "Pedro" };
        var newd3 = new User { _id = "4961429416443432062", count = 66, name = "Pedro" };

        // The first one will be saved
        Debug.Log("Save");
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());

        // Only one document will be stored
        Debug.Log("Save");
        Assert.IsTrue(User.Count() == 3);


        // Find the document by the id
        Debug.Log("Save");
        var opp = User.FindById("4961429416443432060");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Update the document
        Debug.Log("Update");
        var upp = User.UpdateById(d => { d.count = 11; d.name = "Ema"; return d; }, "4961429416443432060");
        Assert.IsTrue(upp);

        // Find the document by the id
        Debug.Log("FindAgain");
        opp = User.FindById("4961429416443432060");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 11);
        Assert.IsTrue(opp.Data.name == "Ema");




        // Try to Update an unexistent document will return false
        Debug.Log("UpdateUnexistent");
        var opp2 = User.UpdateById(d => { d.count = 11; d.name = "Ema"; return d; }, "4961429416443432069");
        Assert.IsFalse(opp2);
        Assert.IsTrue(opp2 == 0);

        // Document is not stored
        Assert.IsTrue(User.Count() == 3);

    }

    [Test]
    public void A300_UpdateById_IfUpdatingThrowsError_DontUpdate()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432060", count = 66, name = "Pedro" };
        var newd2 = new User { _id = "4961429416443432061", count = 66, name = "Pedro" };
        var newd3 = new User { _id = "4961429416443432062", count = 66, name = "Pedro" };

        // The first one will be saved
        Debug.Log("Save");
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());

        Debug.Log("Save");
        Assert.IsTrue(User.Count() == 3);


        // Find the document by the id
        Debug.Log("Save");
        var opp = User.FindById("4961429416443432060");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Update the document
        Debug.Log("Update");
        var upp = User.UpdateById(d => { d.count = 11; d.name = "Ema"; throw new Exception("Expected exception"); }, "4961429416443432060");
        Assert.IsFalse(upp);

        // Find the same document by the id
        Debug.Log("Save");
        opp = User.FindById("4961429416443432060");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);
        Assert.IsTrue(opp.Data.name != "Ema");




        // Try to Update an unexistent document will return false
        Debug.Log("UpdateUnexistent");
        var opp2 = User.UpdateById(d => { d.count = 11; d.name = "Ema"; throw new Exception("Expected exception"); }, "4961429416443432000");
        Assert.IsFalse(opp2);
        Assert.IsTrue(opp2 == 0);


    }

    [Test]
    public void A300_UpdateById_61InvalidOrNullKeyOrUpdateFunc_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.UpdateById(u => { u.count = 88; return u; }, null));
        Assert.Throws<ArgumentNullException>(() => User.UpdateById(u => { u.count = 88; return u; }, ""));
        Assert.Throws<FormatException>(() => User.UpdateById(u => { u.count = 88; return u; }, "343432"));
        Assert.Throws<FormatException>(() => User.UpdateById(u => { u.count = 88; return u; }, "f43f34ff"));
        Assert.Throws<FormatException>(() => User.UpdateById(u => { u.count = 88; return u; }, "4332 333 444 55  22"));
        Assert.Throws<FormatException>(() => User.UpdateById(u => { u.count = 88; return u; }, "433232893874673.254"));

        // Null update func
        Assert.Throws<ArgumentNullException>(() => User.UpdateById(null, "2893128734678923478"));
        Assert.Throws<ArgumentNullException>(() => User.UpdateById(null, null));
        Assert.Throws<FormatException>(() => User.UpdateById(null, "dd"));

        Assert.DoesNotThrow(() => User.UpdateById(d => { return d; }, "4332328938746732254"));
    }




    [Test]
    public void A310_UpdateOne_01WillUpdateAnDocumentIfExist()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 99, name = "Ale" };

        Debug.Log("Save");
        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Debug.Log("Save");
        // Only one document will be stored
        Assert.IsTrue(User.Count() == 5);
        Debug.Log("Save");
        // Update a document
        var upp = User.UpdateOne(d => { d.count = 11; return d; }, d => d.count == 66);
        Debug.Log(upp);
        Assert.IsTrue(upp);
        Assert.IsTrue(upp == 1);
        Debug.Log("Save");
        // Find that document again, because are two with same count
        var opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);
        // Find updated document
        opp = User.FindOne(d => d.count == 11);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 11);
        Debug.Log("Save");

        // If you try to update an unexistent document will return false
        upp = User.UpdateOne(d => { d.count = 2; return d; }, d => d.name == "Ema" );
        Assert.IsFalse(upp);
        Debug.Log("Save");
    }

    [Test]
    public void A311_UpdateOne_IfPredicateThrowsError_IsLikeDontFindAny()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 99, name = "Ale" };

        Debug.Log("Save");
        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Debug.Log("Save");
        Assert.IsTrue(User.Count() == 5);
        Debug.Log("Save");

        // Update a document
        var upp = User.UpdateOne(d => { d.count = 11; return d; }, d => throw new Exception("Expected exception"));
        Assert.IsFalse(upp);
    }

    [Test]
    public void A312_UpdateOne_IfUpdatingThrowsError_DontUpdate()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };

        Debug.Log("Save");
        // The first one will be saved
        Assert.IsTrue(newd1.Save());

        Debug.Log("Save");
        // Only one document will be stored
        Assert.IsTrue(User.Count() == 1);
        Debug.Log("Save");
        // Update a document
        var upp = User.UpdateOne(d => { d.count = 11; d.name = "Ema"; throw new Exception("Expected exception"); }, d => d.count == 66);
        Assert.IsFalse(upp);

        // Find that document again, because is not updated
        var opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);
        Assert.IsTrue(opp.Data.name == "Pedro");

        // If you try to update an unexistent document will return false
        upp = User.UpdateOne(d => { d.count = 11; d.name = "Ema"; throw new Exception("Expected exception"); }, d => d.count == 11);
        Assert.IsFalse(upp);
    }

    [Test]
    public void A310_UpdateOne_61NullUpdatingFuncOrPredicate_WillThrowError()
    {

        // Invalid
        Assert.Throws<ArgumentNullException>(() => User.UpdateOne(d => { d.count = 22; return d; }, null));
        Assert.Throws<ArgumentNullException>(() => User.UpdateOne(null, d => d.count == 22));
        Assert.Throws<ArgumentNullException>(() => User.UpdateOne(null, null));
        Assert.Throws<ArgumentNullException>(() => User.UpdateOne(null, d => true));

        Assert.Throws<ArgumentNullException>(() => User.UpdateOne(d => { return d; }, null));

        Assert.DoesNotThrow(() => User.UpdateOne(d => { return d; }, d => true));
    }




    [Test]
    public void A320_UpdateMany_01WillFindAndUpdateIfExist()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 6);

        // Find a document
        var opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }

        // Update that documents
        var upp = User.UpdateMany(d => { d.count = 22; return d; }, d => d.count == 66);
        Assert.IsTrue(upp);

        // Find a document
        opp = User.FindMany(d => d.count == 22);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 22);
        }
        // Find a document
        opp = User.FindMany(d => d.count == 66);
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data.Length == 0);


        // If you try to update an unexistent document will return true and 0
        upp = User.UpdateMany(d => { d.name = "Pedro"; return d; }, d => d.name == "Ema");
        Assert.IsFalse(opp);
        Assert.IsTrue(opp == 0);

    }

    [Test]
    public void A321_UpdateMany_IfPredicateThrowsError_IsLikeDontFindAny()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        Assert.IsTrue(User.Count() == 6);

        // Find a document
        var opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }

        // Update that documents
        var upp = User.UpdateMany(d => { d.count = 22; return d; }, d => throw new Exception("Expected exception"));
        Assert.IsTrue(upp);
        Assert.AreEqual(0, (int)upp);

        // Find same document
        opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }


        // If you try to update an unexistent document will return true and 0
        upp = User.UpdateMany(d => { d.name = "Ema"; return d; }, d => throw new Exception("Expected exception"));
        Assert.IsTrue(upp);
        Assert.AreEqual(0, (int)upp);

    }

    [Test]
    public void A321_UpdateMany_IfUpdatingThrowsError_DontUpdate()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        Assert.IsTrue(User.Count() == 6);

        // Find a document
        var opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }

        // Update that documents
        var upp = User.UpdateMany(d => { d.count = 22; d.name = "Ema"; throw new Exception("Expected exception"); }, d => d.count == 66);
        Assert.IsTrue(upp);
        Assert.AreEqual(0, (int)upp);

        // Find same document
        opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
            Assert.IsTrue(d.name != "Ema");
        }


        // If you try to update an unexistent document will return true and 0
        upp = User.UpdateMany(d => { d.count = 22; d.name = "Ema"; throw new Exception("Expected exception"); }, d => d.count == 11);
        Assert.IsTrue(upp);
        Assert.AreEqual(0, (int)upp);

    }

    [Test]
    public void A320_UpdateMany_61NullPredicateOrUpdating_WillThrowError()
    {

        // Invalid
        Assert.Throws<ArgumentNullException>(() => User.UpdateMany(d => { d.count = 22; return d; }, null));
        Assert.Throws<ArgumentNullException>(() => User.UpdateMany(null, d => d.count == 22));
        Assert.Throws<ArgumentNullException>(() => User.UpdateMany(null, null));
        Assert.Throws<ArgumentNullException>(() => User.UpdateMany(d => { return d; }, null));

        Assert.DoesNotThrow(() => User.UpdateMany(d => { return d; }, d => true));
    }




    [Test]
    public void A330_UpdateAll_WillUppdateAllDocuments()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // Update all document when no documents are stored
        var upp = User.UpdateAll(d => { d.count = 11; return d; });
        Assert.IsTrue(upp);
        Assert.IsTrue(upp == 0);


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 6);

        // Find all documents
        upp = User.UpdateAll(d => { d.count = 11; return d; });
        Assert.IsTrue(upp);
        Assert.IsTrue(upp == 6);
        Assert.IsTrue(User.FindMany(d => d.count == 11).Data.Length == 6);

    }

    [Test]
    public void A331_UpdateAll_IfUpdatingThrowsError_DontUpdate()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // Update all document when no documents are stored
        var upp = User.UpdateAll(d => { d.count = 11; return d; });
        Assert.IsTrue(upp);
        Assert.IsTrue(upp == 0);


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 6);

        // Find all documents
        upp = User.UpdateAll(d => { d.count = 11; d.name = "Ema"; throw new Exception("Expected exception"); });

        Assert.IsTrue(upp);
        Assert.AreEqual(0, (int)upp);
        Assert.IsTrue(User.FindMany(d => d.count == 11 || d.name == "Ema").Data.Length == 0);

    }




    [Test]
    public void A400_DeleteById_01WillDeleteAnDocumentAndReturnTrueIfDeletedOrNoExist()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { _id = "4961429416443432060", count = 66, name = "Pedro" };
        var newd2 = new User { _id = "4961429416443432061", count = 66, name = "Pedro" };
        var newd3 = new User { _id = "4961429416443432062", count = 66, name = "Pedro" };
        var newd4 = new User { _id = "4961429416443432063", count = 66, name = "Pedro" };
        var newd5 = new User { _id = "4961429416443432064", count = 66, name = "Pedro" };

        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 5);

        // Find the document by the id
        var opp = User.FindById("4961429416443432060");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Delete the document
        Assert.IsTrue(User.DeleteById("4961429416443432060"));

        // If you try to find an unexistent document will return null
        var opp2 = User.FindById("4961429416443432060");
        Assert.IsFalse(opp2);
        Assert.IsTrue(opp2.Data == null);

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 4);

        // Find the document by the id
        opp = User.FindById("4961429416443432061");
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Delete the document
        Assert.IsTrue(User.DeleteById("4961429416443432061"));

        // If you try to find an unexistent document will return null
        opp2 = User.FindById("4961429416443432061");
        Assert.IsFalse(opp2);
        Assert.IsTrue(opp2.Data == null);

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 3);


        // Delete unexistent document
        Assert.IsTrue(User.DeleteById("4961429416443432070"));


        // Only one document will be stored
        Assert.IsTrue(User.Count() == 3);
    }

    [Test]
    public void A400_DeleteById_61InvalidOrNullKey_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.DeleteById(null));
        Assert.Throws<ArgumentNullException>(() => User.DeleteById(""));
        Assert.Throws<FormatException>(() => User.DeleteById("343432"));
        Assert.Throws<FormatException>(() => User.DeleteById("f43f34ff"));
        Assert.Throws<FormatException>(() => User.DeleteById("4332 333 444 55  22"));
        Assert.Throws<FormatException>(() => User.DeleteById("433232893874673.254"));
        Assert.DoesNotThrow(() => User.DeleteById("4332328938746732254"));
    }




    [Test]
    public void A410_DeleteOne_61NullPredicate_WillThrowError()
    {
        Debug.Log("Test");

        // Delete the directory to clear it
        try { Directory.Delete(User.LocationPath, true); } catch (Exception) { }
        User.DeleteAll();

        // Find the document by the id
        Debug.Log("Test");
        Assert.Throws<ArgumentNullException>(() => User.DeleteOne(null));
        Debug.Log("Test");
        Assert.DoesNotThrow(() => User.DeleteOne( d => true));
        Debug.Log("Test");
    }

    [Test]
    public void A410_DeleteOne_01WillDeleteAnDocumentAndReturnTrueIfDeletedOrNoExist()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Debug.Log("Save");
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());

        // Only one document will be stored
        Debug.Log("Save");
        Assert.IsTrue(User.Count() == 5);

        // Find a document
        Debug.Log("Save");
        var opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Delete that document
        Debug.Log("Save");
        Assert.IsTrue(User.DeleteOne(d => d.count == 66));

        // Still can be Finded debause are two with count == 66
        Debug.Log("Save");
        opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Delete that document
        Debug.Log("Save");
        Assert.IsTrue(User.DeleteOne(d => d.count == 66));

        // That document cant be find any more, two are deleted
        Debug.Log("Save");
        opp = User.FindOne(d => d.count == 66);
        Assert.IsFalse(opp);


        // Only one document will be stored
        Debug.Log("Save");
        Assert.IsTrue(User.Count() == 3);




        // If you try to delete unexistent document will return true
        Debug.Log("Test");
        var opp2 = User.DeleteOne(d => d.name == "Ema");
        Debug.Log("Save: " + opp2);
        Assert.IsTrue(opp2);
        // If you try to find an unexistent document will return true
        Debug.Log("Save");
        opp2 = User.DeleteOne(d => d.count == 100);
        Assert.IsTrue(opp2);

    }

    [Test]
    public void A410_DeleteOne_IfPredicateThrowsError_IsLikeDontFindAny()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };


        // The first one will be saved
        Debug.Log("Save");
        Assert.IsTrue(newd1.Save());

        Debug.Log("Save");
        Assert.IsTrue(User.Count() == 1);

        // Find a document
        Debug.Log("Save");
        var opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);

        // Delete that document
        Debug.Log("Save");
        Assert.IsTrue(User.DeleteOne(d => throw new Exception("Expected exception")));

        // Find same document
        Debug.Log("Save");
        opp = User.FindOne(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.count == 66);




        // If you try to delete unexistent document will return true
        Debug.Log("Test");
        var opp2 = User.DeleteOne(d => throw new Exception("Expected exception"));
        Debug.Log("Save: " + opp2);
        Assert.IsTrue(opp2);

    }




    [Test]
    public void A420_DeleteMany_WillDeleteFided()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 6);

        // Find a document
        var opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }

        // Delete that documents
        var dpp = User.DeleteMany(d => d.count == 66);
        Assert.IsTrue(dpp);
        Assert.IsTrue(dpp == 2); // Two deleted

        // Cant Find a that documents
        opp = User.FindMany(d => d.count == 66);
        Assert.IsFalse(opp);
        Assert.IsTrue(opp.Data.Length == 0);

        // Delete unexistent documents
        dpp = User.DeleteMany(d => d.count == 11);
        Assert.IsTrue(dpp);
        Assert.IsTrue(dpp == 0); // Cero deleted


        // Only one document will be stored
        Assert.IsTrue(User.Count() == 4);

    }

    [Test]
    public void A421_DeleteMany_IfPredicateThrowsError_IsLikeDontFindAny()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 2);

        // Find a document
        var opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }

        // Delete that documents
        var dpp = User.DeleteMany(d => throw new Exception("Expected exception"));
        Assert.IsTrue(dpp);
        Assert.IsTrue(dpp == 0); // Two deleted

        // Find same documents
        opp = User.FindMany(d => d.count == 66);
        Assert.IsTrue(opp);
        Assert.IsTrue(opp.Data.Length == 2);
        foreach (var d in opp.Data)
        {
            Assert.IsTrue(d.count == 66);
        }

        // Delete unexistent documents
        dpp = User.DeleteMany(d => throw new Exception("Expected exception"));
        Assert.IsTrue(dpp);
        Assert.IsTrue(dpp == 0); // Cero deleted

    }




    [Test]
    public void A420_DeleteAll_WillDeleteAllDocuments()
    {

        // Create one document
        Debug.Log("Save");
        var newd1 = new User { count = 66, name = "Pedro" };
        var newd2 = new User { count = 66, name = "Paco" };
        var newd3 = new User { count = 77, name = "Benito" };
        var newd4 = new User { count = 88, name = "Juan" };
        var newd5 = new User { count = 33, name = "Juan" };
        var newd6 = new User { count = 99, name = "Ale" };


        // Find all document when no documents are stores
        var opp = User.DeleteAll();
        Assert.IsTrue(opp);
        Assert.IsTrue(opp == 0);


        // The first one will be saved
        Assert.IsTrue(newd1.Save());
        Assert.IsTrue(newd2.Save());
        Assert.IsTrue(newd3.Save());
        Assert.IsTrue(newd4.Save());
        Assert.IsTrue(newd5.Save());
        Assert.IsTrue(newd6.Save());

        // Only one document will be stored
        Assert.IsTrue(User.Count() == 6);

        // Delete all document
        opp = User.DeleteAll();
        Assert.IsTrue(opp);


        // Only one document will be stored
        Assert.IsTrue(User.Count() == 0);

    }




    [Test]
    public void A430_DeleteMany_61NullPredicate_WillThrowError()
    {

        // Find the document by the id
        Assert.Throws<ArgumentNullException>(() => User.DeleteMany(null));
        Assert.DoesNotThrow(() => User.DeleteAll());

    }


}
